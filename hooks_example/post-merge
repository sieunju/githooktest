#!/bin/sh
# Î®∏ÏßÄ ÌõÑ Î∏åÎûúÏπò ÏûêÎèô Ï†ïÎ¶¨
# chmod +x .git/hooks/post-merge

current_branch=$(git rev-parse --abbrev-ref HEAD)

echo "üîÑ Post-merge Start"

# main Î∏åÎûúÏπòÏóê Î®∏ÏßÄÎêú Í≤ΩÏö∞ÏóêÎßå ÌÉúÍ∑∏ ÏÉùÏÑ±
if [ "$current_branch" = "main" ] || [ "$current_branch" = "master" ]; then

    if [ -f "tags/default.txt" ]; then
        echo "üè∑Ô∏è  Detector Tag, Tag Created..."

        # tags/default.txtÏóêÏÑú Ï†ïÎ≥¥ ÏùΩÍ∏∞
        tag_name=$(grep "^name:" tags/default.txt | cut -d':' -f2)
        tag_message=$(grep "^message:" tags/default.txt | cut -d':' -f2)

        if [ -n "$tag_name" ]; then
            # Ïù¥ÎØ∏ Í∞ôÏùÄ ÌÉúÍ∑∏Í∞Ä Ï°¥Ïû¨ÌïòÎäîÏßÄ ÌôïÏù∏
            if git tag -l | grep -q "^$tag_name$"; then
                echo "‚ö†Ô∏è  The same tag already exists: '$tag_name'"
            else
                # ÌÉúÍ∑∏ Î©îÏãúÏßÄ Íµ¨ÏÑ±
                current_date=$(date '+%Y-%m-%d %H:%M:%S')
                commit_hash=$(git rev-parse --short HEAD)

                # messageÍ∞Ä ÎπÑÏñ¥ÏûàÏúºÎ©¥ Í∏∞Î≥∏ Î©îÏãúÏßÄ ÏÇ¨Ïö©
                if [ -z "$tag_message" ]; then
                    tag_message="Auto-generated release"
                fi

                full_message="$tag_message

üìÖ ÏÉùÏÑ± ÎÇ†Ïßú: $current_date
üîó Ïª§Î∞ã Ìï¥Ïãú: $commit_hash
üåø Î∏åÎûúÏπò: $current_branch"

                echo "‚úÖ Created Tag: $tag_name"
                git tag -a "$tag_name" -m "$full_message"

                # Remote Push (ÏõêÍ≤© Ï†ÄÏû•ÏÜåÍ∞Ä ÏûàÎã§Î©¥)
                if git remote get-url origin >/dev/null 2>&1; then
                    echo "üöÄ Push Tag to Remote..."
                    if git push origin "$tag_name"; then
                        echo "‚úÖ Tag '$tag_name' Remote Push Success"
                    else
                        echo "‚ùå Tag Push Fail. Manual: 'git push origin $tag_name'"
                    fi
                else
                    echo "‚ÑπÔ∏è  No remote repository configured"
                fi
            fi
        else
            echo "‚ùå Error: Not Found TagName in tags/default.txt"
        fi
    else
        echo "‚ÑπÔ∏è  No tags/default.txt file found"
    fi
else
    echo "‚ÑπÔ∏è  TagCreate Skip (Not main branch)"
fi

# Î∏åÎûúÏπò Ï†ïÎ¶¨ (main, develop, release/* Ï†úÏô∏ÌïòÍ≥† Î™®Îëê ÏÇ≠Ï†ú)
echo "üßπ Clear Branch..."
deleted_branch=$(git reflog | grep "checkout: moving from" | head -1 | awk '{print $6}')

# Î≥¥Ìò∏Îêú Î∏åÎûúÏπòÍ∞Ä ÏïÑÎãå Í≤ΩÏö∞ ÏÇ≠Ï†ú
case "$deleted_branch" in
    main|master|develop|release/*)
        echo "üõ°Ô∏è  Branch Delete Skip (Protected: $deleted_branch)"
        ;;
    ""|HEAD)
        echo "‚ÑπÔ∏è  No branch to delete"
        ;;
    *)
        if [ -n "$deleted_branch" ]; then
            echo "üóëÔ∏è  Deleting branch: $deleted_branch"

            # Î°úÏª¨ Î∏åÎûúÏπò ÏÇ≠Ï†ú
            if git branch -d "$deleted_branch" 2>/dev/null; then
                echo "‚úÖ Local branch '$deleted_branch' deleted"
            else
                echo "‚ö†Ô∏è  Local branch '$deleted_branch' delete failed (may not exist or unmerged)"
            fi

            # ÏõêÍ≤© Î∏åÎûúÏπò ÏÇ≠Ï†ú (ÏõêÍ≤© Ï†ÄÏû•ÏÜåÍ∞Ä ÏûàÍ≥† Ìï¥Îãπ Î∏åÎûúÏπòÍ∞Ä Ï°¥Ïû¨ÌïòÎäî Í≤ΩÏö∞)
            if git remote get-url origin >/dev/null 2>&1; then
                if git ls-remote --exit-code --heads origin "$deleted_branch" >/dev/null 2>&1; then
                    if git push origin --delete "$deleted_branch" 2>/dev/null; then
                        echo "‚úÖ Remote branch 'origin/$deleted_branch' deleted"
                    else
                        echo "‚ö†Ô∏è  Remote branch 'origin/$deleted_branch' delete failed"
                    fi
                else
                    echo "‚ÑπÔ∏è  Remote branch 'origin/$deleted_branch' does not exist"
                fi
            else
                echo "‚ÑπÔ∏è  No remote repository configured"
            fi
        fi
        ;;
esac

echo "üéâ Post-merge Completed"